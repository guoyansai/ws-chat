const config = require("../client/config.js");
const aiQingyunke = require("./aiQingyunke.js");
const aiOwnthink = require("./aiOwnthink.js");

const fs = require("fs");
const WebSocket = require("ws");
const WebSocketServer = WebSocket.Server;
const wss = new WebSocketServer({
  port: config.wsPortMsg,
});
const saveMsg = {
  total: 100,
  fileName: "",
  tmp: {
    total: 100,
    fileName: "data/asai.txt",
  },
};
const nameList = [
  "‰ª•ÂÖ¨‰∏ªÁöÑÂÇ≤ÊÖ¢„ÇõËîëËßÜÂÖ®‰∏ñÁïå",
  "ËøôÊòØ‰∏∫‰ªÄ‰πà",
  "Á¨®ÂêñÈ†≠‚Üò",
  "ÂÉè‰∏™Â≠©Â≠ê‰∏ÄÊ†∑",
  "Ëøóz„ÇìƒõÓüàÂ´ÜÁöÉc„ÇìƒõÓüà…°ÁÜüÂøÉ",
  "„ÄÅÊΩúÂú®Áæé",
  "‰Ω†Â¶ªË¥üÊàë",
  "Êó∂ÂÖâÊµÅÈÄùËÄåÂéª„É™",
  "- Â§±ÂøÉÂ∞ëÂπ¥‚óá",
  "Ëøô‰∏ÄÁîüÁöÑÂ∞èÊÉÖË∞ä",
  "‰∏∫‰Ω†Â§±Âéª‰∏ÄÂàá*",
  "ÁªÖÂ£´È£éÂ∫¶",
  "„Åê„ÑñÂØ∏Èõ®Œ≥ŒºÂ∞êÂõ°",
  "Ëä±ÊÅãÂè∂ÔºåÂè∂Â±ûÊ†π",
  "Â¢®Ëâ≤ÁÉüÂçé",
  "ÊêÉÊúâÂ§¢ÈÜí—ä√†nÂÖÇ‰∫∫",
  "Áà±‰Ω†ÊàëÂ∑≤Áü•Ë∂≥„ÄÇ",
  "Angel„ÄÅËë¨Áà±",
  "ÈÇ£‰∫õÈùíÊò•Ëú∑Áº©ÁöÑÂøß‰º§",
  "Áã±Âèã",
  "Âì•‰∏∂ÂÇ≤ËßÜÁæ§ÈõÑ",
  "puple‚ï≠‚îÄ‚ïØÁû≥Áú∏",
  "‚óáÊ®±Ëä±Â∑∑„Å¥",
  "ÁîüÊ¥ªÁöÑ‰ª∞Ëßí",
  "È≤∏ÊúâÂ§öÁà±Êµ∑@",
  "Êóß‰∫ºÈõ£Â∞ã",
  "¬ßÊôÆÁΩóÊó∫ÊñØÁöÑËñ∞Ë°£Ëçâ",
  "ÂõòÁú∏yiÁ¨ëÓ†¶ËåΩni‚Ä∞",
  "Â≠§Êµ™Â®áÂñò",
  "ÊàëÊù•Ëá™2002~",
  "Áãó‰∏éÁãóÊùÇ‚ó•",
  "‰∏≠ÊØíoverdose@",
  "ÊäöÂπ≥„ÄÅ",
  "Ëã•„ÑàÊ≠§ÊôÇ„Å§",
  "Ôºî.ÊàëÁöÑÈîô",
  "Ë≥≠Âçö„ÄÅÂÆ≥Ê≠ª‰∫∫",
  "Â¶ñ~‰∏ÄÊ†∑ÁöÑÁñØÂ•≥‰∫∫",
  "„ÄÇÂΩ©Ëâ≤‰∏ñÁïå/",
  "ÈÄóÊØîÂ≠©Â≠ê",
  "Èò≤ËÖêÂâÇ",
  "ÂçÉÁ¥á",
  "ÂóîÊÄ™Êó≥Ëé´Â¶ÆÂç°",
  "ÂñúÈ•ÆÂ±±Êúà",
  "ÂÖîÂ§ßËêå",
  "ÁôΩÁüÆÁî∑",
  "ÂÆâÂàÜÂ∞èÁî∑‰∫∫‚åí",
  'Âè´Áàπ"',
  "ÂßêÂçïË∫´ÁÖßÊ†∑Âó®",
  "Êô∫ÂïÜË¶ÅÊ¨†Ë¥πi",
  "Â±±Ê∂ßÊô¥Â≤ö",
  "ÁªùÊúõÊó≥ÊëáÊªö",
  "‰∏ÄÂÖâÂπ¥ÁöÑÁà±",
  "„ÄÜÔπèÊµÆÈõ≤o–æ",
  "-Thieves men",
  "ÂåóËàπ‰ΩôÈü≥Èü≥ÁªïÁéØËÄ≥",
  "ÈóπÂ§ü‰∫ÜÊ≤°Êúâ",
  "SEND OUT ÔºàÂèëÂÖâÔºâ",
  "‚ñÇÈÅ†„ÉüË∑ùÈõ¢",
  "`ÂüãËóèÈáéÂøÉ",
  "Ê¢¶‰∏≠ÂêªÈÜí",
  "Ê∏∏ÊàèÊÑüÊÉÖÁöÑ‰∫∫",
  "„Ä• ÊåáÂ∞ñÁöÑÊòüÂÖâ",
  "‰Ω†ÊãΩ‰∏™ÊØõÁ∫øÂëÄ!",
  "ÁóûÂ≠ê",
  "Â§©Á©∫Áà±‰∏ä‰∫ÜËØ∫Ë®Ä",
  "„ÇõÂÅ∑Ê∏°‚ÜóÊàëÂøÉ‚Ä≤",
  "Ëä±‚ïÆÂºÄ‰∏ÄÂçä",
  "ÁóòÁóòÊØÅÊàë‰∫∫Áîü!",
  "ÊûúÂë≥Âñµ",
  "ÊäòÂ•â",
  "ÊàëÁº∫‰Ω†‰πà",
  "„ÇÜÂà´ËØ¥‰Ω†Áà±Êàë",
  "‚ïÆËéüÁ¨ëÁöÑÊ∑ö",
  "ÁÆ¥ËØç",
  "ÈπøÊôóÔºåÊàë‰ª¨ÁªìÂ©öÂêß„ÄÇ",
  "ÂêªÊ∏©",
  "ËøùÂøÉ",
  "Gone- (Ê∂àÂ§±Ôºâ",
  "Â≠¶Ê∏£ÂèàÂêçÂè´ÊäÑÈú∏",
  "ÁÉüÔºå‚óèÂØÇ„Ç¨‚åíÂØû„Çí",
  "Ê∑©Êô®‚íàÈªû„Çû",
  "Favorite.Ëéâ",
  "„Çõ Êë©Áôª„ÄÇ",
  "ÂÅ∑ÂæóÊµÆÁîü",
  "ÊºéÊ≤¨È©ìÂÖ≤Ë¨ì",
  "‰øÑÂà†Êéâ‰∫ÜËøáÂéªÔºå‰ªéÊ≠§Â∞ÜÂøÉÂ∞Å",
  "Ê≤âÊ≥äÁéü@",
  "Â∞èÁî∑Áîüi",
  "„ÄÜ„ÄÅÁª≠ÂÜô‰∏çÂ∞ΩÁöÑÁà±ÊÅã",
  "‰πúË®±,ÂÜ≠ÂôØ.",
  "ÁªøË¢ñÂ≠ê",
  "„Å∫ÂØÇÂØûÁöÑÂ∞èÂÖµ",
  "Áº∫Â∏≠",
  "ÔΩÑË∏ÆËÑöËêåÂ¶πÔºäÔø£Ô∏∂Ôø£Ôºä",
  "‰∫ëËØÄ",
  "ÈÖçËßíËÄåÂ∑≤„Å•",
  "Á∫¢Ê•ºÊ¢¶È≠á",
  "ÈááÂßëÂ®òÁöÑËÄÅËòëËèá",
  "ËÉñÊ¨°Ë∂Ö‰∫∫",
];
let users = {
  1: [
    nameList[parseInt(Math.random() * 90 + 1)],
    parseInt(Math.random() * 90 + 1),
    "2012-02-14",
    "-",
    "-",
    getTime(),
    1,
  ],
  2: [
    nameList[parseInt(Math.random() * 90 + 1)],
    parseInt(Math.random() * 90 + 1),
    "2012-02-14",
    "-",
    "-",
    getTime(),
    2,
  ],
  3: [
    nameList[parseInt(Math.random() * 90 + 1)],
    parseInt(Math.random() * 90 + 1),
    "2012-02-14",
    "-",
    "-",
    getTime(),
    3,
  ],
  4: [
    nameList[parseInt(Math.random() * 90 + 1)],
    parseInt(Math.random() * 90 + 1),
    "2012-02-14",
    "-",
    "-",
    getTime(),
    4,
  ],
  5: [
    nameList[parseInt(Math.random() * 90 + 1)],
    parseInt(Math.random() * 90 + 1),
    "2012-02-14",
    "-",
    "-",
    getTime(),
    5,
  ],
  6: [
    nameList[parseInt(Math.random() * 90 + 1)],
    parseInt(Math.random() * 90 + 1),
    "2012-02-14",
    "-",
    "-",
    getTime(),
    6,
  ],
  7: [
    nameList[parseInt(Math.random() * 90 + 1)],
    parseInt(Math.random() * 90 + 1),
    "2012-02-14",
    "-",
    "-",
    getTime(),
    7,
  ],
  8: [
    nameList[parseInt(Math.random() * 90 + 1)],
    parseInt(Math.random() * 90 + 1),
    "2012-02-14",
    "-",
    "-",
    getTime(),
    8,
  ],
  9: [
    nameList[parseInt(Math.random() * 90 + 1)],
    parseInt(Math.random() * 90 + 1),
    "2012-02-14",
    "-",
    "-",
    getTime(),
    9,
  ],
  10: [
    nameList[parseInt(Math.random() * 90 + 1)],
    parseInt(Math.random() * 90 + 1),
    "2012-02-14",
    "-",
    "-",
    getTime(),
    10,
  ],
};
const aiCount = Object.keys(users).length;
const aiSleep = 50; // Â§öÂ∞ë‰∫∫Âú®Á∫øÁöÑÊó∂ÂÄôAIÁù°Ëßâ
let uid = aiCount;
let uuser = {};

// ÂπøÊí≠
wss.broadcast = (msg, ws = {}) => {
  let msgArr = toObj(msg);
  if (msgArr.length === 4) {
    msgArr.push(getTime());

    if (msgArr[1] === config.msgType.wsInRoom) {
      let arrUser = toObj(msgArr[2]);
      users[uid] = [...arrUser, getTime(), uid];
      ws.us.user = users[uid];
      doBroadcast(getUserList());
      fetchMsg(ws);
      msgArr[1] = config.msgType.broadInRoom;
    } else if (msgArr[1] === config.msgType.wsOutRoom) {
      msgArr[1] = config.msgType.broadOutRoom;
      doBroadcast(msgArr);
      msgArr = getUserList();
    } else if (msgArr[1] === config.msgType.wsChangeUser) {
      let oldUser = users[msgArr[0]];
      let arrUser = toObj(msgArr[2]);
      let cStr = "";
      arrUser.forEach((item, index) => {
        if (oldUser[index] !== item) {
          cStr += `${config.userTmpDes[index]}Ôºà${oldUser[index]} ÂèòÊõ¥‰∏∫ ${item}Ôºâ`;
        }
      });
      if (cStr) {
        msgArr = [
          msgArr[0],
          config.msgType.broadChangeUser,
          cStr,
          0,
          getTime(),
        ];
        doBroadcast(msgArr);
        users[msgArr[0]] = [...arrUser, getTime(), msgArr[0]];
        ws.us.user = users[msgArr[0]];
        msgArr = getUserList();
      } else {
        msgArr = [];
      }
    } else if (
      (msgArr[1] === config.msgType.broadMsg &&
        Object.keys(users).length < aiCount + aiSleep &&
        msgArr[3] === 0) ||
      (msgArr[3] <= aiCount && msgArr[3] !== 0)
    ) {
      let aiApi;
      let aiId = msgArr[3];
      !aiId && (aiId = parseInt(Math.random() * aiCount + 1));
      if (aiId % 2 === 0) {
        aiApi = aiOwnthink(msgArr[2]);
      } else {
        aiApi = aiQingyunke(msgArr[2]);
      }
      aiApi.then((res) => {
        const aiRe = [
          aiId,
          config.msgType.broadMsgAi,
          res,
          msgArr[0],
          getTime(),
        ];
        doBroadcast(aiRe);
      });
    }
    doBroadcast(msgArr);
  }
};

//Âª∫Á´ãËøûÊé•Âêé
wss.on("connection", (ws, req) => {
  uid++;
  uuser = {
    uid,
    time: getTime(),
    user: config.userTmp,
  };
  uuser.user[0] = `Ê∏∏ÂÆ¢${uid}`;
  uuser.user[3] = `${req.connection.remoteAddress}`;
  ws.us = uuser;
  ws.send(toStr([uid, config.msgType.myUid, uuser.user, 0, uuser.time]));

  ws.on("message", (msg) => {
    if ("" + msg === "ping") {
      ws.send("pong");
    } else {
      wss.broadcast("" + msg, ws);
    }
  });

  ws.on("close", (o) => {
    try {
      delete users[ws.us.uid];
      wss.broadcast([ws.us.uid, config.msgType.wsOutRoom, ws.us.user, 0]);
    } catch (e) {
      console.log(666.909, e);
    }
  });
});

function toObj(val) {
  if (typeof val === "string") {
    return JSON.parse(val);
  }
  return val;
}
function toStr(val) {
  if (typeof val === "object") {
    return JSON.stringify(val);
  }
  return val;
}
function getUserList() {
  return [0, config.msgType.broadUser, toStr({ ...users }), 0, getTime()];
}
//Ëé∑ÂèñÊó∂Èó¥
function getTime() {
  const date = new Date();
  return (
    date.getFullYear() +
    (date.getMonth() + 1 + "").padStart(2, "0") +
    (date.getDate() + "").padStart(2, "0") +
    (date.getHours() + "").padStart(2, "0") +
    (date.getMinutes() + "").padStart(2, "0") +
    (date.getSeconds() + "").padStart(2, "0")
  );
}

function doBroadcast(msgArr) {
  if (msgArr.length === 5) {
    saveMsgs(msgArr);
    if (
      msgArr[1] === config.msgType.broadInRoom ||
      msgArr[1] === config.msgType.broadOutRoom
    ) {
      // ‰∏çÂèëÈÄÅËøõÂá∫ËÅäÂ§©ÂÆ§ÂπøÊí≠
    } else {
      wss.clients.forEach(function each(client) {
        client.send(toStr(msgArr));
      });
    }
  }
}
function saveMsgs(msg) {
  if (msg[1] !== config.msgType.broadUser) {
    saveMsg.total--;
    if (saveMsg.total < 1) {
      saveMsg.total = saveMsg.tmp.total;
      saveMsg.fileName = "data/" + msg[3] + ".txt";
      saveCurFileName();
    } else if (!saveMsg.fileName) {
      try {
        saveMsg.fileName = fs.readFileSync(saveMsg.tmp.fileName, "utf-8");
      } catch (err) {
        saveMsg.fileName = "data/" + msg[3] + ".txt";
        saveCurFileName();
      }
    }
    fs.appendFile(saveMsg.fileName, toStr(msg) + ",", (err, data) => {
      if (err) throw err;
    });
  }
}

function saveCurFileName() {
  fs.writeFile(saveMsg.tmp.fileName, saveMsg.fileName, (err, data) => {
    if (err) throw err;
  });
}

function fetchMsg(ws) {
  if (saveMsg.fileName) {
    try {
      const msgData = fs.readFileSync(saveMsg.fileName, "utf-8");
      if (msgData) {
        if (msgData.length > 0) {
          ws.send(
            toStr([
              ws.us.uid,
              config.msgType.broadMsgFetch,
              `[${msgData}]`,
              0,
              getTime(),
            ])
          );
        }
      }
    } catch (err) {
      console.log(666.909, err);
    }
  }
}
